---

# Provision the infrastructure using Terraform
- name: Provision infrastructure
  hosts: openstack
  roles:
    - cluster_infra

- name: DEBUG - show host groups
  hosts: all
  become: no
  gather_facts: no
  tasks:
    - debug:
        var: group_names
    - meta: end_here

# FIXME: replace with etc_hosts
# Setup tasks now that all hosts have been added to the correct groups
- hosts: cluster
  become: yes
  tasks:
    # Ensure that the hosts in the cluster can all refer to each other by their hostname
    - name: Populate /etc/hosts with cluster hosts
      lineinfile:
        path: /etc/hosts
        regexp: "{{ hostvars[host].inventory_hostname }}"
        line: "{{ hostvars[host].ansible_default_ipv4.address }} {{ hostvars[host].inventory_hostname }}"
      loop: "{{ ansible_play_hosts }}"
      loop_control:
        loop_var: host

# Ensure that the secrets are generated and persisted on the control host
- name: Generate and persist secrets
  hosts: control
  gather_facts: no
  become: yes
  roles:
    - persist_openhpc_secrets

# validate.yml asserts presence of a control group which doesn't exist when
# destroying infra, so only validate when we're not destroying
- hosts: openstack
  gather_facts: no
  become: no
  tasks:
    - set_fact:
        appliances_validate: false
      when: "cluster_state | default('') == 'absent'"

# TODO: FIXME: maybe by doing the user move in cloud-init?
# The first task in the bootstrap playbook causes the home directory of the rocky user to be movedÂ on the first run
# This can disrupt the SSH connection, particularly because we use the login host as a jump host
# So we move the home directory on the login node and reset the connections first
- hosts: login
  gather_facts: false
  tasks:
    - name: Set up Ansible user
      user: "{{ (appliances_local_users_default | selectattr('user.name', 'eq', appliances_local_users_ansible_user_name))[0]['user'] }}"
      become_method: "sudo"
      # Need to change working directory otherwise we try to switch back to non-existent directory.
      become_flags: '-i'
      become: true

- hosts: cluster
  gather_facts: no
  tasks:
    - name: Reset persistent SSH connections
      meta: reset_connection
