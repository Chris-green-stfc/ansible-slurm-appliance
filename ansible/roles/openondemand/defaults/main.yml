---

openondemand_dashboard_support_url: (undefined)
openondemand_dashboard_docs_url: (undefined)
openondemand_mapping_users: []
# Certificate for SSL access to Open Ondemand node:
# (Files in defaults here are autogenerated by the mod_ssl package installed by ondemand-apache)
openondemand_ssl_cert: /etc/pki/tls/certs/localhost.crt
openondemand_ssl_cert_key: /etc/pki/tls/private/localhost.key

openondemand_filesapp_paths: [] # List of paths (in addition to $HOME) to add shortcuts to in the Files dashboard app

# Convenience synonyms for osc:ood role vars:
openondemand_clusters: {} # synonym for osc.ood:clusters
# NB: osc.ood:servername default of "localhost" misconfigures name-based virtual hosting if using ip address

openondemand_auth: # Enable authentication using a specified module with sensible defaults. Currently only accepted value is `oidc`.

openondemand_monitoring: true # Install prometheus exporter

# Required variables for `openondemand_auth=oidc` :
openondemand_oidc_redirect_hostname: # hostname/IP which the OIDC provider should redirect the browser back to after authenticating, i.e. your Open Ondemand node's hostname/IP **as entered in the browser**, so external IP/address.
openondemand_oidc_client_id:         # Client ID as generated by OIDC provider
openondemand_oidc_client_secret:     # Client secret as generated by OIDC provider, should be vault-protected
openondemand_oidc_provider_url:           # URL (inc. protocol) of the OIDC provider
openondemand_oidc_crypto_passphrase: # Random string, should be vault-protected

# keys here are osc.ood vars - override using the osc.odd var name in inventory
openondemand_oidc_defaults:
  oidc_uri: /oidc # has to be set separately to trigger oidc integration!
  ood_auth_openidc:
    OIDCRedirectURI: "https://{{ openondemand_oidc_redirect_hostname }}/oidc"
    OIDCClientID: "{{ openondemand_oidc_client_id }}"
    OIDCClientSecret: "{{ openondemand_oidc_client_secret }}" # TODO: needs to be in secrets
    OIDCProviderMetadataURL: "{{ openondemand_oidc_provider_url }}/.well-known/openid-configuration"
    OIDCCryptoPassphrase: "{{ openondemand_oidc_crypto_passphrase }}"
    OIDCPassClaimsAs: environment
    OIDCPassIDTokenAs: serialized
    OIDCScope: openid profile preferred_username
    #OIDCPassRefreshToken: "On" # NB: has to be quoted to avoid conversion to True/False
  httpd_auth: # ood_portal.yml.j2
  - 'AuthType openid-connect'
  - 'Require valid-user'
    
# The below mapping is used to override osc.ood defaults. Keys are osc.ood varibale names.
# If you need to override *these* defaults (i.e. this role's vars are not sufficent) just set the corresponding osc.ood var as normal.
openondemand_osc_ood_defaults:

  # Synonyms:
  clusters: "{{ openondemand_clusters }}"

  # Enable SSL by default:
  httpd_port: 443
  ssl:
    - "SSLCertificateFile {{ openondemand_ssl_cert }}"
    - "SSLCertificateKeyFile {{ openondemand_ssl_cert_key }}"
    # following based on https://grok.lsu.edu/article.aspx?articleid=17596
    - SSLProtocol all -TLSv1.1 -TLSv1 -SSLv2 -SSLv3
    - SSLCipherSuite ALL:+HIGH:!ADH:!EXP:!SSLv2:!SSLv3:!MEDIUM:!LOW:!NULL:!aNULL
    - SSLHonorCipherOrder On
    - SSLCompression off
    - SSLSessionTickets Off
  
  # User mapping:
  user_map_cmd: "{{ '/opt/ood/ood_auth_map/bin/ood_auth_map.mapfile' if openondemand_mapping_users else omit }}"

  # TODO: auth
  oidc_uri: "{{ openondemand_oidc_defaults['oidc_uri'] if openondemand_auth == 'oidc' else omit }}"
  ood_auth_openidc: "{{ openondemand_oidc_defaults['ood_auth_openidc'] if openondemand_auth == 'oidc' else omit }}"
  httpd_auth: "{{ openondemand_oidc_defaults['httpd_auth'] if openondemand_auth == 'oidc' else omit }}"
